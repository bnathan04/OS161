//pagetable.c

#include <pagetable.h>
#include <types.h>
#include <vm.h>
#include <coremap.h>
#include <lib.h>
#include <thread.h>
#include <curthread.h>
#include <kern/errno.h>


// create a single page in page table 
page* 
page_create(unsigned int faultaddr, int npages){

	// get the page table
	pagetable table = curthread->t_vmspace->as_pagetable;
	page* newpage;

	if(page_in_pagetable(faultaddr)){
		// page has been created before for this fault address
		newpage = find_page(faultaddr);

		/*NO COPY ON WRITE SO ONLY ONE USER PLEASE*/
		assert(coremap[newpage->ppagenum].used == 0);

		coremap[newpage->ppagenum].used++;

		assert(newpage->vaddr == faultaddr);
		
	}
	else{
		// allocate the new page
		newpage = kmalloc(sizeof(struct page));
		if (newpage == NULL){
			return NULL;
		}

		newpage->vaddr = faultaddr;
		// only need to set vpagenum and next = NULL when it is a brand new linked list entry
		newpage->vpagenum = find_next_pagetable_index();
		newpage->next = NULL;
	}


	// need to do some core map checks before allocating new paddr
	if(npages > coremapEntriesFree){

		// Remember that we assume npages is always 1 for page create
		/*NVM SHOULD NEVER GET HERE*/

		/*NEED TO INVALIDATE THE */
		// newpage->paddr = evict_coremap_entry();

	}
	else {

		newpage->paddr = getppages(npages);
	}

	// get a ppagenum 
	newpage->ppagenum = PADDR_TO_COREMAP(newpage->paddr);

	// when a page gets created, it must be valid - 
	// newpage->valid = 1;

	// ensure linked list functionality - set the next pointer of previous page to new page
	// if no table exists, link the first page
	// if(newpage->vpagenum > 0 ){	
	// 	table[newpage->vpagenum - 1].next = newpage;
	// }
	// else if(table == NULL) {
	// 	curthread->t_vmspace->as_pagetable = newpage;
	// }

	if(table == NULL){
		curthread->t_vmspace->as_pagetable = newpage;
	}
	else{

		page* temp;

		temp = table;

		while(temp->next!=NULL){
			temp = temp->next;
		}

		temp->next = newpage;

	}

	assert(page_in_pagetable(faultaddr));
	// return
	return (newpage);
}

// find the next available index in the list
int
find_next_pagetable_index(){
	
	// get the page table
	pagetable table = curthread->t_vmspace->as_pagetable;

	int num;
	int i = 0;

	if(table == NULL){
		// this is the first page 
		num = 0;
	}
	else{
		// cycle through to get the first available index
		while(1){
			if(table[i].next == NULL){
				num = i+1;
				break;
			}
			else{
				i++;
			}
		}
	}

	return num;
}

page* 
find_page(unsigned int vaddr){

	int i = 0;
	pagetable table = curthread->t_vmspace->as_pagetable;

	// shouldn't call this on an empty page table or with a bad vaddr
	assert(vaddr!=0);
	assert(table!=NULL);

	// cycle through and find your page
	while (table->vaddr != vaddr){
		table = table->next;
	}

	return (table);

}

// destroy a single page in page table
void 
page_destroy(page* victim){
	/* TO BE IMPLEMENTED*/

	// break the victim out of the linked list
	
	if(victim == curthread->t_vmspace->as_pagetable){
		// this is the head of linked list 
		curthread->t_vmspace->as_pagetable = victim->next;
	}
	else{

	pagetable table = curthread->t_vmspace->as_pagetable;	

	page* prev = &table[victim->vpagenum - 1];
	prev->next = victim->next;
	}

	victim->next = NULL;

	// set all the elements to zero, free the page
	victim->vaddr = 0;
	victim->vpagenum = 0;
	victim->paddr = 0;
	victim->ppagenum = 0;
	kfree(victim);
	victim = NULL;
}

void 
pagetable_destroy(){

	// repeatedly destroy the head
	while (curthread->t_vmspace->as_pagetable != NULL){
		page_destroy(curthread->t_vmspace->as_pagetable);
	}
}

void 
invalidate_page(page* invalid){
	invalid->valid = 0;
}



int 
page_in_pagetable(unsigned int vaddr){

	// vaddr &= PAGE_SIZE;//page align
	
	assert(curthread->t_vmspace != NULL);
	pagetable pt = (curthread->t_vmspace)->as_pagetable;

	while(pt != NULL){
		if(pt->vaddr == vaddr){
			return(1);
		}
		pt = pt->next;
	}
	return(0);
}
