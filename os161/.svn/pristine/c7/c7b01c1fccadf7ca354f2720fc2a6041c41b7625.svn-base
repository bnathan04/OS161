/* All the includes from dumbvm are also included here*/
#include <types.h>
#include <kern/errno.h>
#include <lib.h>
#include <thread.h>
#include <curthread.h>
#include <addrspace.h>
#include <vm.h>
#include <machine/spl.h>
#include <machine/tlb.h>

// include the coremap stuff
#include <coremap.h>

#include <pagetable.h>

/* under dumbvm, always have 48k of user stack */
#define DUMBVM_STACKPAGES    12


/* Space to implement our vm functions */

u_int32_t totalCoremapEntries;//total number of entries available for the coremap
u_int32_t coremapEntriesFree;
u_int32_t basePage;

void 
vm_bootstrap(void){
	
	init_coremap();

	//set up coremap

	// u_int32_t ramStart;
	// u_int32_t ramEnd;
	// ram_getsize(&ramStart, &ramEnd);

	// 	// do i need this?
	// 	// assert(ramEnd > ramStart);

	// u_int32_t numPageFrames = (ramEnd - ramStart)/PAGE_SIZE;

	// //take up a page in mm (or more if necessary) for the core map

	// u_int32_t coremapSize = ROUNDUP(numPageFrames * sizeof(CoremapObject), PAGE_SIZE);
	// coremap = (CoremapObject*) PADDR_TO_KVADDR(ramStart);
	// ramStart += coremapSize;// now some space in ram preserved for coremap permenantly

	// basePage = ramStart;
	// totalCoremapEntries = (ramEnd - ramStart)/PAGE_SIZE;
	// coremapEntriesFree = totalCoremapEntries;

	//initialize core map
} 


paddr_t
getppages(unsigned long npages)
{
	// kprintf("IN GETPPAGES\n");

	int spl;
	paddr_t addr;

	spl = splhigh();

	// addr = ram_stealmem(npages);

	addr = find_pages_in_core_map(npages);
	
	splx(spl);
	return addr;
}

/* Allocate/free some kernel-space virtual pages */
vaddr_t 
alloc_kpages(int npages)
{
	paddr_t pa;
	pa = getppages(npages);
	if (pa==0) {
		return 0;
	}
	return PADDR_TO_KVADDR(pa);
}

void 
free_kpages(vaddr_t addr)
{
	int spl = splhigh();
	coremap_free(KVADDR_TO_PADDR(addr));
	splx(spl);

	// (void) addr;
}

//writing this incase we change how we exit a thread that faulted
void
fault_exit_thread(){
	thread_exit();
}

int
invalid_fault_region(vaddr_t faultAddress, vaddr_t bot1, 
					vaddr_t top1, vaddr_t bot2, vaddr_t top2, 
					vaddr_t heapBot, vaddr_t stackTop){
	
	//good region
	if(
	(faultAddress >= bot1 && faultAddress < top1) ||
	(faultAddress >= bot2 && faultAddress < top2) ||
	(faultAddress >= heapBot && faultAddress < stackTop)
	)return(0);
		
	//baddog.jpeg
	return(1);	
}

// deal with fault. if it's allowed fix problem. else exit thread
int
vm_fault(int faulttype, vaddr_t faultaddress)
{
	vaddr_t vbase1, vtop1, vbase2, vtop2, heapBase, stackTop;
	paddr_t paddr;
	int i;
	u_int32_t ehi, elo;
	struct addrspace *as;
	int spl;
	int result;

	spl = splhigh();

	faultaddress &= PAGE_FRAME;

	DEBUG(DB_VM, "dumbvm: fault: 0x%x\n", faultaddress);

	switch (faulttype) {
	    case VM_FAULT_READONLY:
			//from dumbvm
			/* We always create pages read-write, 
			so we can't get this */
			//panic("dumbvm: got VM_FAULT_READONLY\n");

	    	//if a read fault happened, something bad happened.
	    	//just exit
	    	//fault_exit_thread();
	    case VM_FAULT_READ:
	    	//should i fault_exit_thread here too????
	    	//break;
	    case VM_FAULT_WRITE:
			break;
	    default:
			splx(spl);
			return EINVAL;
	}

	as = curthread->t_vmspace;
	if (as == NULL) {
		/*
		 * No address space set up. This is probably a kernel
		 * fault early in boot. Return EFAULT so as to panic
		 * instead of getting into an infinite faulting loop.
		 */
		return EFAULT;
	}

	// //check if fault happened outside it's virtual address range

	// vbase1 = as->as_vbase1;
	// vtop1 = as->as_vbase1 + as->as_npages1 * PAGE_SIZE;

	// vbase2 = as->as_vbase2;
	// vtop2 = as->as_vbase2 + as->as_npages2 * PAGE_SIZE;

	// heapBase = as->as_heapvbase;
	// stackTop = USERSTACK;

	// result = invalid_fault_region(faultaddress, vbase1, 
	// 		vtop1, vbase2, vtop2, heapBase, stackTop);	
	// if(result) fault_exit_thread();

	// //page associated with tlb entry that cause fault
	// // may not exist. check
	// if(!page_in_pagetable(faultaddress) ){
	// 	//create page
	// }

	// //fault occured because tlb didn't have entry.
	// //write tlb entry in	
	


	// splx(spl);
	// return(0);



	from dumbvm
	//Assert that the address space has been set up properly.
	assert(as->as_vbase1 != 0);
	assert(as->as_pbase1 != 0);
	assert(as->as_npages1 != 0);
	assert(as->as_vbase2 != 0);
	assert(as->as_pbase2 != 0);
	assert(as->as_npages2 != 0);
	assert(as->as_stackpbase != 0);
	assert((as->as_vbase1 & PAGE_FRAME) == as->as_vbase1);
	assert((as->as_pbase1 & PAGE_FRAME) == as->as_pbase1);
	assert((as->as_vbase2 & PAGE_FRAME) == as->as_vbase2);
	assert((as->as_pbase2 & PAGE_FRAME) == as->as_pbase2);
	assert((as->as_stackpbase & PAGE_FRAME) == as->as_stackpbase);

	vbase1 = as->as_vbase1;
	vtop1 = vbase1 + as->as_npages1 * PAGE_SIZE;
	vbase2 = as->as_vbase2;
	vtop2 = vbase2 + as->as_npages2 * PAGE_SIZE;
	stackbase = USERSTACK - DUMBVM_STACKPAGES * PAGE_SIZE;
	stacktop = USERSTACK;

	if (faultaddress >= vbase1 && faultaddress < vtop1) {
	 	paddr = (faultaddress - vbase1) + as->as_pbase1;
	}
	else if (faultaddress >= vbase2 && faultaddress < vtop2) {
		paddr = (faultaddress - vbase2) + as->as_pbase2;
	}
	else if (faultaddress >= stackbase && faultaddress < stacktop) {
		paddr = (faultaddress - stackbase) + as->as_stackpbase;
	}
	else {
		splx(spl);
		return EFAULT;
	}

	// make sure it's page-aligned 
	assert((paddr & PAGE_FRAME)==paddr);

	for (i=0; i<NUM_TLB; i++) {
		TLB_Read(&ehi, &elo, i);
		if (elo & TLBLO_VALID) {
			continue;
		}
		ehi = faultaddress;
		elo = paddr | TLBLO_DIRTY | TLBLO_VALID;
		DEBUG(DB_VM, "dumbvm: 0x%x -> 0x%x\n", faultaddress, paddr);
		TLB_Write(ehi, elo, i);
		splx(spl);
		return 0;
	}

	kprintf("dumbvm: Ran out of TLB entries - cannot handle page fault\n");
	splx(spl);
	return EFAULT;
}

// int
// as_prepare_load(struct addrspace *as)
// {
// 	assert(as->as_pbase1 == 0);
// 	assert(as->as_pbase2 == 0);
// 	assert(as->as_stackpbase == 0);

// 	as->as_pbase1 = getppages(as->as_npages1);
// 	if (as->as_pbase1 == 0) {
// 		return ENOMEM;
// 	}

// 	as->as_pbase2 = getppages(as->as_npages2);
// 	if (as->as_pbase2 == 0) {
// 		return ENOMEM;
// 	}

// 	as->as_stackpbase = getppages(DUMBVM_STACKPAGES);
// 	if (as->as_stackpbase == 0) {
// 		return ENOMEM;
// 	}

// 	return 0;
// }

// struct addrspace *
// as_create(void)
// {
// 	struct addrspace *as = kmalloc(sizeof(struct addrspace));
// 	if (as==NULL) {
// 		return NULL;
// 	}

// 	as->as_vbase1 = 0;
// 	as->as_pbase1 = 0;
// 	as->as_npages1 = 0;
// 	as->as_vbase2 = 0;
// 	as->as_pbase2 = 0;
// 	as->as_npages2 = 0;
// 	as->as_stackpbase = 0;

// 	return as;
// }

// void
// as_destroy(struct addrspace *as)
// {
// 	kfree(as);
// }

// void
// as_activate(struct addrspace *as)
// {
// 	int i, spl;

// 	(void)as;

// 	spl = splhigh();

// 	for (i=0; i<NUM_TLB; i++) {
// 		TLB_Write(TLBHI_INVALID(i), TLBLO_INVALID(), i);
// 	}

// 	splx(spl);
// }

// int
// as_define_region(struct addrspace *as, vaddr_t vaddr, size_t sz,
// 		 int readable, int writeable, int executable)
// {
// 	size_t npages; 

// 	/* Align the region. First, the base... */
// 	sz += vaddr & ~(vaddr_t)PAGE_FRAME;
// 	vaddr &= PAGE_FRAME;

// 	/* ...and now the length. */
// 	sz = (sz + PAGE_SIZE - 1) & PAGE_FRAME;

// 	npages = sz / PAGE_SIZE;

// 	 We don't use these - all pages are read-write 
// 	(void)readable;
// 	(void)writeable;
// 	(void)executable;

// 	if (as->as_vbase1 == 0) {
// 		as->as_vbase1 = vaddr;
// 		as->as_npages1 = npages;
// 		return 0;
// 	}

// 	if (as->as_vbase2 == 0) {
// 		as->as_vbase2 = vaddr;
// 		as->as_npages2 = npages;
// 		return 0;
// 	}

// 	/*
// 	 * Support for more than two regions is not available.
// 	 */
// 	kprintf("dumbvm: Warning: too many regions\n");
// 	return EUNIMP;
// }

// int
// as_prepare_load(struct addrspace *as)
// {
// 	assert(as->as_pbase1 == 0);
// 	assert(as->as_pbase2 == 0);
// 	assert(as->as_stackpbase == 0);

// 	as->as_pbase1 = getppages(as->as_npages1);
// 	if (as->as_pbase1 == 0) {
// 		return ENOMEM;
// 	}

// 	as->as_pbase2 = getppages(as->as_npages2);
// 	if (as->as_pbase2 == 0) {
// 		return ENOMEM;
// 	}

// 	as->as_stackpbase = getppages(DUMBVM_STACKPAGES);
// 	if (as->as_stackpbase == 0) {
// 		return ENOMEM;
// 	}

// 	return 0;
// }

// int
// as_complete_load(struct addrspace *as)
// {
// 	(void)as;
// 	return 0;
// }

// int
// as_define_stack(struct addrspace *as, vaddr_t *stackptr)
// {
// 	assert(as->as_stackpbase != 0);

// 	*stackptr = USERSTACK;
// 	return 0;
// }

// int
// as_copy(struct addrspace *old, struct addrspace **ret)
// {
// 	struct addrspace *new;

// 	new = as_create();
// 	if (new==NULL) {
// 		return ENOMEM;
// 	}

// 	new->as_vbase1 = old->as_vbase1;
// 	new->as_npages1 = old->as_npages1;
// 	new->as_vbase2 = old->as_vbase2;
// 	new->as_npages2 = old->as_npages2;

// 	if (as_prepare_load(new)) {
// 		as_destroy(new);
// 		return ENOMEM;
// 	}

// 	assert(new->as_pbase1 != 0);
// 	assert(new->as_pbase2 != 0);
// 	assert(new->as_stackpbase != 0);

// 	memmove((void *)PADDR_TO_KVADDR(new->as_pbase1),
// 		(const void *)PADDR_TO_KVADDR(old->as_pbase1),
// 		old->as_npages1*PAGE_SIZE);

// 	memmove((void *)PADDR_TO_KVADDR(new->as_pbase2),
// 		(const void *)PADDR_TO_KVADDR(old->as_pbase2),
// 		old->as_npages2*PAGE_SIZE);

// 	memmove((void *)PADDR_TO_KVADDR(new->as_stackpbase),
// 		(const void *)PADDR_TO_KVADDR(old->as_stackpbase),
// 		DUMBVM_STACKPAGES*PAGE_SIZE);
	
// 	*ret = new;
// 	return 0;
// }






