#ifndef _VM_H_
#define _VM_H_

#include <machine/vm.h>

/*
 * VM system-related definitions.
 *
 * You'll probably want to add stuff here.
 */

#define KVADDR_TO_PADDR(vaddr) ((vaddr)-MIPS_KSEG0)


/* Fault-type arguments to vm_fault() */
#define VM_FAULT_READ        0    /* A read was attempted */
#define VM_FAULT_WRITE       1    /* A write was attempted */
#define VM_FAULT_READONLY    2    /* A write to a readonly page was attempted*/


/* Initialization function */
void vm_bootstrap(void);

//a fault occurred and we want to kill the thread. 
void fault_exit_thread(void);

//check if the fault region is within the addr space allowed
//for this process/thread. ADD STACK/HEAP CHECK
// bot & top are vaddr regions 
int invalid_fault_region(vaddr_t faultAddress, vaddr_t bot1, 
						vaddr_t top1, vaddr_t bot2, vaddr_t top2, 	
						vaddr_t stackStart, vaddr_t stackEnd);

/* Fault handling function called by trap code */
int vm_fault(int faulttype, vaddr_t faultaddress);

/* Allocate/free kernel heap pages (called by kmalloc/kfree) */
vaddr_t alloc_kpages(int npages);
void free_kpages(vaddr_t addr);

paddr_t getppages(unsigned long npages);

#endif /* _VM_H_ */
