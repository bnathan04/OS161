#ifndef _THREAD_H_
#define _THREAD_H_

/*
 * Definition of a thread.
 */

/* Get machine-dependent stuff */
#include <machine/pcb.h> 

// Get the user process stuff
#include <kern/syscall_func.h> 
#include <synch.h>
 
#include <process.h> 
#include <pagetable.h>

/****** START User process stuff added in ASST2 ******/

#define MAXPROCESS 200
// comment for sahan
enum {
	P_UNUSED,
	P_RUN,
	P_EXIT,
}; 


struct Node{ 
	void* data;
	struct Node* next;
	int id;
};

typedef struct process{

	// thread for this process
	struct thread* thread;
	
	// relevant pids - don't know how this will work, whether parent pid is needed, and whether 
	// to put pid here or inside the thread struct - in both places for now.
	int pid; 

	// keep track of what this process did - b/c process struct is really just a container located at each index in pTable
	// that can be reused for new threads
	int pState;
	struct semaphore* exitSem;

	// for exit
	int exitStatus;

	//if this process has been waited on before = 1, else = 0 
	int waitedOn;

} process;


// We need a table and a running count to keep track of user processes  

process pTable[MAXPROCESS];

//number of processes running
int numProcess;

// function to load pTable 

void init_proc_table();



/****** END User process stuff added in ASST2 ******/


struct addrspace;

struct thread {
	/**********************************************************/
	/* Private thread members - internal to the thread system */
	/**********************************************************/
	
	struct pcb t_pcb;
	char *t_name;
	const void *t_sleepaddr;
	char *t_stack;

	// the corresponding process id which contains this thread
	// implemented in ASST2
	int pid;
	int parentPid;
	int childPid;

	/**********************************************************/
	/* Public thread members - can be used by other code      */
	/**********************************************************/
	
	/*
	 * This is public because it isn't part of the thread system,
	 * and will need to be manipulated by the userprog and/or vm
	 * code.
	 */
	struct addrspace *t_vmspace;

	/*
	 * This is public because it isn't part of the thread system,
	 * and is manipulated by the virtual filesystem (VFS) code.
	 */
	struct vnode *t_cwd;

};

/* Call once during startup to allocate data structures. */
struct thread *thread_bootstrap(void);

/* Call during panic to stop other threads in their tracks */
void thread_panic(void);

/* Call during shutdown to clean up (must be called by initial thread) */
void thread_shutdown(void);

/*
 * Make a new thread, which will start executing at "func".  The
 * "data" arguments (one pointer, one integer) are passed to the
 * function.  The current thread is used as a prototype for creating
 * the new one. If "ret" is non-null, the thread structure for the new
 * thread is handed back. (Note that using said thread structure from
 * the parent thread should be done only with caution, because in
 * general the child thread might exit at any time.) Returns an error
 * code.
 */
int thread_fork(const char *name, 
		void *data1, unsigned long data2, 
		void (*func)(void *, unsigned long),
		struct thread **ret);

/*
 * Cause the current thread to exit.
 * Interrupts need not be disabled.
 */
void thread_exit(void);

/*
 * Cause the current thread to yield to the next runnable thread, but
 * itself stay runnable.
 * Interrupts need not be disabled.
 */
void thread_yield(void);

/*
 * Cause the current thread to yield to the next runnable thread, and
 * go to sleep until wakeup() is called on the same address. The
 * address is treated as a key and is not interpreted or dereferenced.
 * Interrupts must be disabled.
 */
void thread_sleep(const void *addr);

/*
 * Cause all threads sleeping on the specified address to wake up.
 * Interrupts must be disabled.
 */
void thread_wakeup(const void *addr);

/*
 * Return nonzero if there are any threads sleeping on the specified
 * address. Meant only for diagnostic purposes.
 */
int thread_hassleepers(const void *addr);


/*
 * Private thread functions.
 */

/* Machine independent entry point for new threads. */
void mi_threadstart(void *data1, unsigned long data2, 
		    void (*func)(void *, unsigned long));

/* Machine dependent context switch. */
void md_switch(struct pcb *old, struct pcb *nu);


#endif /* _THREAD_H_ */
